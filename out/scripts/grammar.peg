start = instrs

s = (' '/'\t')*
cs = s ',' s
num = n:[0-9]+ { return parseInt(n.join('')) }
nl = '\r'? '\n'
nls = s nl [\n\r \t]*

instrs
  = is:instr* { return is }

instr 
  = mnemonic:instr3reg s rd:reg cs rs:reg cs rt:reg nl
     { return {type: 'R', mnemonic: mnemonic,  rs: rs, rt: rt, rd: rd} }
  / mnemonic:instr2reg_shift s rd:reg cs rs:reg cs shamt:num nl
     { return {type: 'R', mnemonic: mnemonic,  rs: rs, rd: rd, shamt:shamt} }
  / mnemonic:instr2reg1imm s rt:reg cs rs:reg cs imm:num nl
     { return {type: 'I', mnemonic: mnemonic, rs:rs, rt:rt, imm:imm } }
  / mnemonic:instr1reg1imm s rt:reg cs imm:num nl
     { return {type: 'I', mnemonic: mnemonic, rt:rt, imm:imm } }
  / mnemonic:instr2reg s rs:reg cs rt:reg nl
     { return {type: 'R', mnemonic: mnemonic, rs:rs, rt:rt } }
  / mnemonic:instr1reg_rd s rd:reg nl
     { return {type: 'R', mnemonic: mnemonic, rd:rd } }
  / mnemonic:instr1reg_rs s rs:reg nl
     { return {type: 'R', mnemonic: mnemonic, rs:rs } }
  / mnemonic:instr1addr s addr:num nl
     { return {type: 'J', mnemonic: mnemonic, addr:addr } }
  / mnemonic:instr_branch s rs:reg cs rt:reg cs imm:num nl
     { return {type: 'I', mnemonic: mnemonic, rs:rs, rt:rt, imm:imm } }
  / mnemonic:instr_offset s rt:reg cs imm:num '(' rs:reg ')' nl
     { return {type: 'I', mnemonic: mnemonic, rs:rs, rt:rt, imm:imm } }

instr3reg
	= mnemonic:('sllv'
	/ 'srlv'
	/ 'srav'
	/ 'addu'
	/ 'add'
	/ 'subu'
	/ 'sub'
	/ 'and'
	/ 'or'
	/ 'xor'
	/ 'nor'
	/ 'sltu'
	/ 'slt') { return mnemonic }

instr2reg_shift
	= mnemonic:('sll'
	/ 'srl'
	/ 'sra') { return mnemonic }

instr2reg1imm
	= mnemonic:('addiu'
	/ 'addi'
	/ 'slti'
	/ 'andi'
	/ 'ori') { return mnemonic }

instr1reg1imm
	= mnemonic:'lui' {return mnemonic}

instr2reg
	= mnemonic:('multu'
	/ 'mult'
	/ 'divu'
	/ 'div') { return mnemonic }

instr1reg_rd
	= mnemonic:('mfhi'
	/ 'mflo') { return mnemonic }

instr1reg_rs
	= mnemonic:'jr' { return mnemonic }

instr1addr
	= mnemonic:('jal'
	/ 'j') { return mnemonic }

instr_branch
	= mnemonic:('beq'
	/ 'bne') {return mnemonic}
	
	/*/ 'jalr' */

instr_offset
	= mnemonic:('lbu'
	/ 'lhu'
	/ 'lw'
	/ 'lb'
	/ 'lh'
	/ 'sb'
	/ 'sh'
	/ 'sw') {return mnemonic}

reg
	= name:('zero'
	/ 'at'
	/ 'v0' / 'v1'
	/ 'a0' / 'a1' / 'a2' / 'a3'
	/ 't0' / 't1' / 't2' / 't3' / 't4' / 't5' / 't6' / 't7'
	/ 's0' / 's1' / 's2' / 's3' / 's4' / 's5' / 's6' / 's7'
	/ 't8' / 't9'
	/ 'k0' / 'k1'
	/ 'gp'
	/ 'sp'
	/ 'fp'
	/ 'ra') { return name }